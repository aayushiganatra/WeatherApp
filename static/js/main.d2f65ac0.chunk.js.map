{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","process","Greeting","props","isWeather","console","log","className","App","useState","query","setQuery","weather","setWeather","quote","setQuote","main","temp","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","response","catch","err","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","text","author","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oPAGMA,G,MACCC,oCADDD,EAEC,2CAGP,SAASE,EAASC,GAChB,IAAMC,EAAYD,EAAMC,UAExB,OADAC,QAAQC,IAAIF,GACTA,EACM,yBAAKG,UAAU,YAAf,+BAGA,yBAAKA,UAAU,YAAf,YA8FIC,MA1Ff,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,mBAAS,IAHtB,mBAGNK,EAHM,KAGCC,EAHD,KA6Cb,OACE,yBAAKR,UAAmC,oBAAhBK,EAAQI,MAC3BJ,EAAQI,KAAKC,KAAO,GACrB,WAED,OACD,8BACE,yBAAKV,UAAU,cACb,2BACEW,KAAK,OACLX,UAAU,aACVY,YAAY,sBACZC,SAAU,SAAAC,GAAC,OAAIV,EAASU,EAAEC,OAAOC,QACjCA,MAAOb,EACPc,WAtDK,SAAAC,GACA,UAAVA,EAAIC,MACLC,MAAM,GAAD,OAAI3B,EAAJ,qBAAwBU,EAAxB,+BAAoDV,IACtD4B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJlB,EAAWkB,GACX1B,QAAQC,IAAIM,GACZD,EAAS,OAEbgB,MAAM,kGAAmG,CACvG,OAAU,MACV,QAAW,CACT,kBAAmB,iEACnB,iBAAkB1B,wDAGrB2B,MAAK,SAAAI,GAAQ,OAAIA,EAASF,UAC1BF,MAAK,SAAAI,GACJjB,EAASiB,GACT3B,QAAQC,IAAI0B,MAEbC,OAAM,SAAAC,GACL7B,QAAQC,IAAI4B,WAmCa,oBAAhBtB,EAAQI,KAEf,yBAAKT,UAAU,gBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,YAAYK,EAAQuB,KAAnC,KAA2CvB,EAAQwB,IAAIC,QAAvD,KACA,yBAAK9B,UAAU,QAnCP,SAAC+B,GACnB,IAIIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EANS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAC7E,YAAa,UAAW,WAAY,YAKlBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAyBDE,CAAY,IAAIC,QAEzC,yBAAKzC,UAAU,eACb,6BACA,yBAAKA,UAAU,QACZ0C,KAAKC,MAAMtC,EAAQI,KAAKC,MAD3B,SAGA,yBAAKV,UAAU,WACZK,EAAQA,QAAQ,GAAGI,OAGxB,yBAAKT,UAAU,eACZO,EAAMqC,KADT,OACkB,2BAAIrC,EAAMsC,UAI9B,kBAAClD,EAAD,CAAUE,UAAWQ,OC1FXyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.d2f65ac0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nconst api = {\n  key: process.env.REACT_APP_WEATHER_API_KEY,\n  url: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction Greeting(props) {\n  const isWeather = props.isWeather;\n  console.log(isWeather);\n  if(isWeather) {\n    return <div className=\"error404\">Entered location not found!</div> \n  }\n  else {\n    return <div className=\"error404\">Welcome!</div>;\n  }\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState('');\n  const [quote, setQuote] = useState('');\n\n  const search = evt => {\n    if(evt.key===\"Enter\") {\n      fetch(`${api.url}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          console.log(weather);\n          setQuery('');\n        })\n      fetch(\"https://quotes-inspirational-quotes-motivational-quotes.p.rapidapi.com/quote?token=ipworld.info\", {\n        \"method\": \"GET\",\n        \"headers\": {\n          \"x-rapidapi-host\": \"quotes-inspirational-quotes-motivational-quotes.p.rapidapi.com\",\n          \"x-rapidapi-key\": process.env.REACT_APP_QUOTE_API_KEY\n        }\n      })\n      .then(response => response.json())\n      .then(response => {\n        setQuote(response);\n        console.log(response);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n    }\n  }\n\n  const dateBuilder = (d) => {  \n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\",\n     \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    \n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\")\n     ? ((weather.main.temp > 27)\n      ? 'app-warm'\n        :'app') \n      :'app'}>\n      <main> \n        <div className=\"search-box\">\n          <input \n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search ðŸ”Ž\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search}\n          />\n        </div>\n        {(typeof weather.main != \"undefined\") ? (\n          \n          <div className=\"weather-item\">\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country} </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <br/>\n              <div className=\"temp\">\n                {Math.round(weather.main.temp)}Â°C\n              </div>\n              <div className=\"weather\">\n                {weather.weather[0].main}\n              </div>\n            </div>\n            <div className=\"daily-quote\">\n              {quote.text}\" - <i>{quote.author}</i>\n            </div>\n          </div>\n        ): (\n          <Greeting isWeather={weather}/>  \n        )} \n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}